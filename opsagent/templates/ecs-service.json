{
  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "boat-cluster",
        "CapacityProviders": ["FARGATE"],
        "DefaultCapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE",
            "Weight": 1
          }
        ]
      }
    },
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "{{.ServiceName}}-task",
        "RequiresCompatibilities": ["FARGATE"],
        "NetworkMode": "awsvpc",
        "Cpu": "256",
        "Memory": "512",
        "ExecutionRoleArn": {"Ref": "ExecutionRole"},
        "TaskRoleArn": {"Ref": "TaskRole"},
        "ContainerDefinitions": [
          {
            "Name": "{{.ServiceName}}-container",
            "Image": "{{.ContainerImage}}",
            "PortMappings": {{.PortMappings}},
            "Environment": {{.EnvironmentVariables}},
            "Secrets": {{.Secrets}},
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {"Ref": "LogGroup"},
                "awslogs-region": "{{.AWSRegion}}",
                "awslogs-stream-prefix": "{{.ServiceName}}"
              }
            },
            "HealthCheck": {{.HealthCheck}}
          }
        ]
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["LoadBalancerListener"],
      "Properties": {
        "Cluster": {"Ref": "ECSCluster"},
        "TaskDefinition": {"Ref": "TaskDefinition"},
        "LaunchType": "FARGATE",
        "DesiredCount": 1,
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": {{.Subnets}},
            "SecurityGroups": [{"Ref": "SecurityGroup"}],
            "AssignPublicIp": "ENABLED"
          }
        },
        "LoadBalancers": [
          {
            "ContainerName": "{{.ServiceName}}-container",
            "ContainerPort": {{.ContainerPort}},
            "TargetGroupArn": {"Ref": "TargetGroup"}
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "{{.ServiceName}}-sg",
        "GroupDescription": "Security group for {{.ServiceName}} service",
        "VpcId": "{{.VpcId}}",
        "SecurityGroupIngress": {{.SecurityGroupRules}},
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "{{.ServiceName}}-alb",
        "Type": "application",
        "Scheme": "internet-facing",
        "IpAddressType": "ipv4",
        "Subnets": {{.Subnets}},
        "SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "{{.ServiceName}}-alb-sg",
        "GroupDescription": "Security group for {{.ServiceName}} load balancer",
        "VpcId": "{{.VpcId}}",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "{{.ServiceName}}-tg",
        "Port": {{.ContainerPort}},
        "Protocol": "HTTP",
        "TargetType": "ip",
        "VpcId": "{{.VpcId}}",
        "HealthCheckPath": "{{.HealthCheckPath}}",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 5
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {"Ref": "TargetGroup"}
          }
        ],
        "LoadBalancerArn": {"Ref": "LoadBalancer"},
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "{{.ServiceName}}-execution-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ]
      }
    },
    "TaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "{{.ServiceName}}-task-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "{{.ServiceName}}-task-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {{.TaskPolicyStatements}}
            }
          }
        ]
      }
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/ecs/{{.ServiceName}}",
        "RetentionInDays": 7
      }
    }
  },
  "Outputs": {
    "LoadBalancerDNS": {
      "Description": "DNS name of the load balancer",
      "Value": {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}
    },
    "ServiceName": {
      "Description": "Name of the ECS service",
      "Value": {"Ref": "Service"}
    },
    "ClusterName": {
      "Description": "Name of the ECS cluster",
      "Value": {"Ref": "ECSCluster"}
    }
  }
}